generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  email         String    @unique
  name          String?
  password      String
  education     Json?
  workExperience Json?
  phone         String?
  github        String?
  portfolio     String?
  role          Role
  applications  Application[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

enum Role {
  ADMIN
  APPLICANT
}

model Job {
  id              String           @id @default(uuid())
  title           String
  department      String
  location        String
  salary          String?
  status          JobStatus        @default(ACTIVE)
  customQuestions CustomQuestion[]
  applications    Application[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  adminEmail      String           // email of the admin who posted the job (required)
}

enum JobStatus {
  ACTIVE
  CLOSED
}

model CustomQuestion {
  id        String   @id @default(uuid())
  job       Job      @relation(fields: [jobId], references: [id])
  jobId     String
  question  String
  type      QuestionType
  required  Boolean  @default(false)
  applicationAnswers  ApplicationAnswer[]
}

enum QuestionType {
  TEXT
  PARAGRAPH
  SELECT
  MULTISELECT
  FILE
  YESNO
  INTEGER
}

model Application {
  id            String              @id @default(uuid())
  user          User                @relation(fields: [userId], references: [id])
  userId        String
  job           Job                 @relation(fields: [jobId], references: [id])
  jobId         String
  status        ApplicationStatus   @default(PENDING)
  resumeUrl     String?
  answers       ApplicationAnswer[]
  actionLogs    ActionLog[]
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
}

enum ApplicationStatus {
  PENDING
  ACCEPTED
  REJECTED
  ON_HOLD
}

model ApplicationAnswer {
  id              String           @id @default(uuid())
  application     Application      @relation(fields: [applicationId], references: [id])
  applicationId   String
  customQuestion  CustomQuestion   @relation(fields: [customQuestionId], references: [id])
  customQuestionId String
  answer          String
}

model ActionLog {
  id            String    @id @default(uuid())
  application   Application @relation(fields: [applicationId], references: [id])
  applicationId String
  action        ApplicationStatus
  timestamp     DateTime  @default(now())
}
